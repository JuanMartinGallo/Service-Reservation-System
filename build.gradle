plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    alias(libs.plugins.springBoot)
    alias(libs.plugins.dependencyManagement)
    alias(libs.plugins.dependencyCheck)
    alias(libs.plugins.benManesVersions)
    alias(libs.plugins.versionCatalogUpdate)
    alias(libs.plugins.sonarqube)
}

group = 'com.srs'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Core
    implementation libs.springBootStarterWebflux
    implementation libs.springBootStarterValidation
    implementation libs.springBootStarterDataR2dbc
    implementation libs.springJdbc
    implementation libs.springThymeleaf
    developmentOnly libs.springDevtools

    // JSON
    implementation libs.jacksonDatabind
    implementation libs.jacksonDatatypeJsr310

    // Data
    implementation libs.flywayCore
    implementation libs.flywayPostgresql
    runtimeOnly libs.postgresql
    runtimeOnly libs.r2dbcPostgresql

    // Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok

    // Documentation
    implementation libs.springdocOpenapiStarterWebfluxUi

    // Resilience
    implementation libs.springRetry
    implementation libs.springAspects
    implementation libs.aspectjrt
    implementation libs.aspectjweaver

    // Unit Testing
    testImplementation libs.springBootStarterTest
    testImplementation libs.reactorTest
    testImplementation libs.testng

    // Integration Test
    testImplementation libs.springBootTestcontainers
    testImplementation libs.testcontainersJunitJupiter
    testImplementation libs.testcontainersR2dbc
    testImplementation libs.testcontainersPostgresql

    // Security
    implementation libs.springSecurity
    implementation libs.springSecurityCore
    implementation libs.springSecurityConfig
    implementation libs.springSecurityWeb
    testImplementation libs.springSecurityTest
    implementation libs.springSecurityOauth2ResourceServer
    implementation libs.dockerJava

    // JWT
    implementation libs.jsonWebToken

    // Frontend
    implementation libs.thymeleaf
    implementation libs.thymeleafLayoutDialect
    implementation libs.thymeleafExtrasSpringsecurity6
    implementation libs.thymeleafSpring6
    runtimeOnly libs.webjarsLocator
    runtimeOnly libs.webjarsBootstrap
    runtimeOnly libs.webjarsPopper
    runtimeOnly libs.webjarsJquery

}

checkstyle {
    toolVersion = '10.17.0'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

tasks.register('checkstyle') {
    reports {
        xml.required = false
        html.required = true
    }
}

jacoco {
    toolVersion = "0.8.11"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
    }
}

bootRun {
    jvmArgs = ['-Dspring.profiles.active=local']
}

bootJar {
    dependsOn processResources
}

jar {
    from('src/main/resources/static') {
        into 'static'
        duplicatesStrategy = 'exclude'
    }
    from('src/main/resources/templates') {
        into 'templates'
        duplicatesStrategy = 'exclude'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += ['-parameters']
}

// Dependency Maintenance
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
